#!/bin/bash

# LinuxOS-AI - Interactive AI System Administrator
# Built on Google's Gemini CLI

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
GRAY='\033[0;37m'
NC='\033[0m'

# ASCII Banner
show_banner() {
    echo -e "${CYAN}"
    cat << "EOF"
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇ                        ü§ñ LinuxOS-AI v0.1.0                    ‚îÇ
‚îÇ                                                                 ‚îÇ
‚îÇ    Your Intelligent Linux System Administrator                 ‚îÇ
‚îÇ    Built on Gemini CLI with Enhanced System Management         ‚îÇ
‚îÇ                                                                 ‚îÇ
‚îÇ    Type 'help' for commands or just chat naturally!            ‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
EOF
    echo -e "${NC}"
}

# System status check
show_system_status() {
    echo -e "${BLUE}üìä System Status:${NC}"
    
    # CPU info
    if command -v top &> /dev/null; then
        CPU_USAGE=$(top -l 1 | grep "CPU usage" | awk '{print $3}' | sed 's/%//' 2>/dev/null || echo "N/A")
    else
        CPU_USAGE="N/A"
    fi
    
    # Memory info  
    if command -v vm_stat &> /dev/null; then
        MEMORY_INFO=$(vm_stat 2>/dev/null | head -5 | tail -4)
        echo -e "${GREEN}üíæ Memory Status:${NC}"
        echo "$MEMORY_INFO" | sed 's/^/   /'
    fi
    
    # Disk info
    echo -e "${GREEN}üíΩ Disk Usage:${NC}"
    df -h | head -2 | tail -1 | awk '{print "   " $1 ": " $3 "/" $2 " (" $5 " used)"}'
    
    echo -e "${GREEN}üîí Security: ${NC}Protected"
    echo -e "${GREEN}üåê Network: ${NC}$(ping -c 1 google.com &>/dev/null && echo "Online" || echo "Offline")"
    echo
}

# Check API availability
check_api_availability() {
    if [ -z "$GEMINI_API_KEY" ]; then
        return 1
    fi
    
    # Quick test to see if API is available
    echo "testing api" | timeout 10s npx @google/gemini-cli --standard >/dev/null 2>&1
    return $?
}

# Check prerequisites
check_prerequisites() {
    if [ -z "$GEMINI_API_KEY" ]; then
        echo -e "${RED}‚ùå GEMINI_API_KEY environment variable not set${NC}"
        echo -e "${YELLOW}To use LinuxOS-AI, you need a Gemini API key:${NC}"
        echo -e "${CYAN}1. Visit: https://aistudio.google.com/apikey${NC}"
        echo -e "${CYAN}2. Generate a new API key${NC}"
        echo -e "${CYAN}3. Set it as an environment variable:${NC}"
        echo -e "${GREEN}   export GEMINI_API_KEY=\"your-api-key-here\"${NC}"
        echo
        return 1
    fi
    
    if ! command -v npx &> /dev/null; then
        echo -e "${RED}‚ùå npx not found. Please install Node.js${NC}"
        return 1
    fi
    
    return 0
}

# Enhanced help
show_enhanced_help() {
    echo -e "${CYAN}üîß LinuxOS-AI Commands:${NC}"
    echo
    echo -e "${YELLOW}System Administration Examples:${NC}"
    echo "  \"install nginx\"                    - Install web server"
    echo "  \"install oracle with 8GB memory\"  - Install Oracle Database"
    echo "  \"setup web server with SSL\"       - Configure secure web server"
    echo "  \"clean up system files\"           - System cleanup"
    echo "  \"secure my server\"                - Security audit & hardening"
    echo "  \"why is my system slow?\"          - Performance analysis"
    echo "  \"organize my downloads folder\"    - File management"
    echo
    echo -e "${YELLOW}Available Commands:${NC}"
    echo "  status                              - Show system status"
    echo "  help                               - Show this help"
    echo "  processes                          - Show running processes"
    echo "  disk                               - Show disk usage"
    echo "  memory                             - Show memory usage"
    echo "  network                            - Show network info"
    echo "  users                              - Show logged in users"
    echo "  logs                               - Show system logs"
    echo "  services                           - Show system services"
    echo "  exit                               - Exit LinuxOS-AI"
    echo
    echo -e "${YELLOW}Gemini CLI Options:${NC}"
    echo "  --standard                         - Use standard Gemini CLI"
    echo "  --model <model>                    - Specify AI model"
    echo "  --sandbox                          - Run in sandbox mode"
    echo "  --yolo                            - Auto-accept all actions"
    echo
    echo -e "${GREEN}üí° Just chat naturally - LinuxOS-AI understands system administration tasks!${NC}"
}

# Local command execution
execute_local_command() {
    local cmd="$1"
    
    case "$cmd" in
        "status")
            show_system_status
            ;;
        "help")
            show_enhanced_help
            ;;
        "processes"|"ps")
            echo -e "${BLUE}üîÑ Top Processes:${NC}"
            ps aux | head -10
            ;;
        "disk"|"df")
            echo -e "${BLUE}üíΩ Disk Usage:${NC}"
            df -h
            ;;
        "memory"|"mem")
            echo -e "${BLUE}üíæ Memory Usage:${NC}"
            if command -v free &> /dev/null; then
                free -h
            elif command -v vm_stat &> /dev/null; then
                vm_stat
            else
                echo "Memory information not available"
            fi
            ;;
        "network"|"net")
            echo -e "${BLUE}üåê Network Information:${NC}"
            ifconfig 2>/dev/null | grep -A 1 "inet " | head -6 || ip addr show 2>/dev/null | grep -A 1 "inet " | head -6 || echo "Network info not available"
            ;;
        "users"|"who")
            echo -e "${BLUE}üë• Logged in Users:${NC}"
            who
            ;;
        "logs"|"log")
            echo -e "${BLUE}üìã Recent System Logs:${NC}"
            if command -v journalctl &> /dev/null; then
                journalctl --lines=10 --no-pager
            elif [ -f "/var/log/system.log" ]; then
                tail -10 /var/log/system.log
            else
                echo "System logs not accessible"
            fi
            ;;
        "services"|"service")
            echo -e "${BLUE}‚öôÔ∏è  System Services:${NC}"
            if command -v systemctl &> /dev/null; then
                systemctl list-units --type=service --state=running | head -15
            elif command -v launchctl &> /dev/null; then
                launchctl list | head -15
            else
                echo "Service information not available"
            fi
            ;;
        "exit"|"quit"|"q")
            echo -e "${GREEN}üëã Goodbye!${NC}"
            exit 0
            ;;
        *)
            return 1
            ;;
    esac
    return 0
}

# Fallback interactive mode
fallback_interactive_mode() {
    echo -e "${YELLOW}‚ö†Ô∏è  AI features temporarily unavailable (API quota exceeded)${NC}"
    echo -e "${BLUE}üîß Running in local system administration mode${NC}"
    echo -e "${GRAY}Available commands: status, help, processes, disk, memory, network, users, logs, services, exit${NC}"
    echo
    
    while true; do
        echo -e -n "${GREEN}LinuxOS-AI (local)> ${NC}"
        read -r input
        
        if [ -z "$input" ]; then
            continue
        fi
        
        # Try to execute as local command first
        if execute_local_command "$input"; then
            echo
            continue
        fi
        
        # Handle common system administration queries locally
        case "$input" in
            *"disk usage"*|*"disk space"*)
                execute_local_command "disk"
                ;;
            *"memory"*|*"ram"*)
                execute_local_command "memory"
                ;;
            *"process"*|*"cpu"*)
                execute_local_command "processes"
                ;;
            *"network"*|*"ip"*|*"connection"*)
                execute_local_command "network"
                ;;
            *"user"*|*"login"*)
                execute_local_command "users"
                ;;
            *"log"*|*"error"*)
                execute_local_command "logs"
                ;;
            *"service"*|*"daemon"*)
                execute_local_command "services"
                ;;
            *"install"*|*"setup"*|*"configure"*)
                echo -e "${YELLOW}üí° Installation/configuration commands require AI features.${NC}"
                echo -e "${BLUE}Please try again later when API quota resets, or use --standard mode.${NC}"
                ;;
            *)
                echo -e "${YELLOW}Command not recognized in local mode. Try 'help' for available commands.${NC}"
                echo -e "${BLUE}For AI-powered assistance, please try again later when API quota resets.${NC}"
                ;;
        esac
        echo
    done
}

# Enhanced interactive mode with API
enhanced_mode_with_api() {
    echo -e "${PURPLE}üöÄ Starting enhanced interactive mode with AI...${NC}"
    echo -e "${GRAY}Type 'help' for commands, 'status' for system info, or just chat naturally!${NC}"
    echo
    
    # Create a temporary prompt file with enhanced system context
    TEMP_PROMPT=$(mktemp)
    cat > "$TEMP_PROMPT" << 'EOF'
You are LinuxOS-AI, an Interactive AI System Administrator built on Gemini CLI. You have comprehensive knowledge of Linux system administration including:

üîß SYSTEM ADMINISTRATION CAPABILITIES:
- Package Installation: Auto-detect package managers (apt, yum, dnf, pacman, brew, snap)
- Database Setup: Oracle, MySQL, PostgreSQL, MongoDB with full configuration
- Web Servers: Nginx, Apache with SSL/TLS certificates and auto-renewal
- Security Management: Firewall configuration, SSL certificates, security audits
- Performance Analysis: CPU, memory, disk monitoring and optimization
- File Management: Bulk operations, duplicate removal, organization
- Storage Cleanup: System optimization and temporary file management

üéØ SPECIAL COMMANDS:
- When user says "status" - provide system analysis
- When user says "help" - show available commands
- When user asks about installations - provide step-by-step guides
- When user mentions performance issues - analyze and suggest optimizations
- When user asks about security - provide security hardening recommendations

üîí SAFETY PROTOCOLS:
- Always explain what commands will do before executing
- Ask for confirmation for potentially dangerous operations
- Provide rollback options when possible
- Use dry-run mode when available

Respond as a helpful, knowledgeable system administrator. Be concise but thorough. Always prioritize system safety and best practices.
EOF
    
    # Start Gemini CLI with enhanced prompt
    echo -e "${GREEN}ü§ñ LinuxOS-AI Ready! Chat with your system administrator...${NC}"
    echo
    
    # Use the system prompt and start interactive session
    npx @google/gemini-cli --prompt "$(cat "$TEMP_PROMPT")" "$@"
    
    # Cleanup
    rm -f "$TEMP_PROMPT"
}

# Enhanced interactive mode
enhanced_mode() {
    show_banner
    show_system_status
    
    # Check if API is available
    echo -e "${BLUE}üîç Checking AI service availability...${NC}"
    
    if check_api_availability; then
        enhanced_mode_with_api "$@"
    else
        # Fallback to local interactive mode
        fallback_interactive_mode
    fi
}

# Main function
main() {
    case "$1" in
        "help"|"--help"|"-h")
            show_enhanced_help
            ;;
        "status"|"--status")
            show_banner
            show_system_status
            ;;
        "--standard")
            shift
            echo -e "${BLUE}üîÑ Starting standard Gemini CLI mode...${NC}"
            npx @google/gemini-cli "$@"
            ;;
        "--version"|"-v")
            echo "LinuxOS-AI v0.1.0 (based on Gemini CLI)"
            npx @google/gemini-cli --version
            ;;
        "--offline"|"--local")
            show_banner
            show_system_status
            fallback_interactive_mode
            ;;
        *)
            if ! check_prerequisites; then
                echo -e "${BLUE}Starting in offline mode...${NC}"
                show_banner
                show_system_status
                fallback_interactive_mode
            else
                enhanced_mode "$@"
            fi
            ;;
    esac
}

# Handle interrupt signals
trap 'echo -e "\n${GREEN}üëã LinuxOS-AI shutting down gracefully...${NC}"; exit 0' INT TERM

# Run main function
main "$@" 