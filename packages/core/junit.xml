<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="1466" failures="0" errors="0" time="7.361609088">
    <testsuite name="src/index.test.js" timestamp="2025-07-02T17:04:59.268Z" hostname="Adarshs-MacBook-Pro.local" tests="1" failures="0" errors="0" skipped="0" time="0.001296541">
        <testcase classname="src/index.test.js" name="placeholder tests &gt; should pass" time="0.00066175">
        </testcase>
    </testsuite>
    <testsuite name="src/index.test.ts" timestamp="2025-07-02T17:04:59.269Z" hostname="Adarshs-MacBook-Pro.local" tests="1" failures="0" errors="0" skipped="0" time="0.002876917">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.001602417">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.js" timestamp="2025-07-02T17:04:59.269Z" hostname="Adarshs-MacBook-Pro.local" tests="18" failures="0" errors="0" skipped="0" time="0.048803834">
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.032922417">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.00089525">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.002103875">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.000786208">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.001091625">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.0016625">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.001401375">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.000760833">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.0004925">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.001825416">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.0005265">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.000427208">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.000385958">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.000381083">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.0004775">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.000374333">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.000818791">
        </testcase>
        <testcase classname="src/config/config.test.js" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.000534208">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-07-02T17:04:59.273Z" hostname="Adarshs-MacBook-Pro.local" tests="18" failures="0" errors="0" skipped="0" time="0.045381584">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.032254084">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.001063334">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.002294584">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.002022334">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.0006855">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.000454417">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.000438792">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.000429333">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.000424833">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.000846417">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.000535667">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.000438625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.000437916">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.000391375">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.000577875">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.000422666">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.0004065">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.000374417">
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.js" timestamp="2025-07-02T17:04:59.276Z" hostname="Adarshs-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="0.044559292">
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; setModel &gt; should update the model and mark as switched during session" time="0.036561166">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; setModel &gt; should handle multiple model switches during session" time="0.0008545">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.00113725">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.000516583">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; getModel &gt; should fallback to initial model if contentGeneratorConfig is not available" time="0.000756625">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should start as false for new session" time="0.000390125">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should remain false if no model switch occurs" time="0.000432959">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should persist switched state throughout session" time="0.000370042">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should reset model to default and clear session switch flag" time="0.000469125">
        </testcase>
        <testcase classname="src/config/flashFallback.test.js" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should handle case where contentGeneratorConfig is not initialized" time="0.00201">
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-07-02T17:04:59.278Z" hostname="Adarshs-MacBook-Pro.local" tests="10" failures="0" errors="0" skipped="0" time="0.041434667">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should update the model and mark as switched during session" time="0.032999292">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should handle multiple model switches during session" time="0.000936834">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.0019535">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.00056125">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fallback to initial model if contentGeneratorConfig is not available" time="0.000732417">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should start as false for new session" time="0.000382916">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should remain false if no model switch occurs" time="0.000425708">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isModelSwitchedDuringSession &gt; should persist switched state throughout session" time="0.000361625">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should reset model to default and clear session switch flag" time="0.000492292">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; resetModelToDefault &gt; should handle case where contentGeneratorConfig is not initialized" time="0.001201292">
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.js" timestamp="2025-07-02T17:04:59.280Z" hostname="Adarshs-MacBook-Pro.local" tests="18" failures="0" errors="0" skipped="0" time="0.084832916">
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.017902959">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.002330292">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.001160458">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.000505625">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.000491209">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.000540792">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.000497375">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.000589125">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.007831375">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.003393666">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.002762042">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.002731833">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.000726042">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold" time="0.004508667">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.005343334">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.003343917">
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.005531291">
            <system-out>
checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.js" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.022836833">
            <system-out>
Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-07-02T17:04:59.283Z" hostname="Adarshs-MacBook-Pro.local" tests="18" failures="0" errors="0" skipped="0" time="0.092841917">
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.03288675">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.0025155">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.003891167">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.001025584">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.000533625">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.000545875">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.000507208">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.004533542">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.003120667">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateJson &gt; should call generateContent with the correct parameters" time="0.001054583">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.00188875">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.006673959">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.003632667">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold" time="0.015688375">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.002283333">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.001029583">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.002406583">
            <system-out>
checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.005726166">
            <system-out>
Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.js" timestamp="2025-07-02T17:04:59.286Z" hostname="Adarshs-MacBook-Pro.local" tests="2" failures="0" errors="0" skipped="0" time="0.005442">
        <testcase classname="src/core/contentGenerator.test.js" name="contentGenerator &gt; should create a CodeAssistContentGenerator" time="0.002644834">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.js" name="contentGenerator &gt; should create a GoogleGenAI content generator" time="0.001474666">
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-07-02T17:04:59.287Z" hostname="Adarshs-MacBook-Pro.local" tests="2" failures="0" errors="0" skipped="0" time="0.004652875">
        <testcase classname="src/core/contentGenerator.test.ts" name="contentGenerator &gt; should create a CodeAssistContentGenerator" time="0.000965375">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="contentGenerator &gt; should create a GoogleGenAI content generator" time="0.0027105">
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.js" timestamp="2025-07-02T17:04:59.288Z" hostname="Adarshs-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.043391917">
        <testcase classname="src/core/coreToolScheduler.test.js" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.03846875">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.001438209">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.000287334">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.0002035">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.000326542">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.000123416">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.000087791">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.000070666">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.000067">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.0000515">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.000056125">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.js" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.000052958">
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-07-02T17:04:59.290Z" hostname="Adarshs-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.057381583">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.054395458">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.000450541">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.000076667">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.000057833">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.000072583">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.000463958">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.000282875">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.000107708">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.000074625">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.000056083">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.0000615">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.000055334">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.js" timestamp="2025-07-02T17:04:59.291Z" hostname="Adarshs-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.154436083">
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.117791166">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.008289958">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.000286333">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent model outputs" time="0.000233209">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should handle a mix of user and model roles in outputContents (though unusual)" time="0.000202125">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should consolidate multiple adjacent model outputs correctly" time="0.0001365">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should not consolidate if roles are different between model outputs" time="0.000153042">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should merge with last history entry if it is also a model output" time="0.000314333">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should correctly merge consolidated new output with existing model history" time="0.00022475">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should handle empty modelOutput array" time="0.000289167">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should handle aggregating modelOutput" time="0.000266459">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should handle modelOutput with parts being undefined or empty (if they pass initial every check)" time="0.000217833">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should correctly handle automaticFunctionCallingHistory" time="0.000214375">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should add userInput if AFC history is present but empty" time="0.000172375">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content from modelOutput" time="0.000184208">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content even if it is the only content" time="0.000145708">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should correctly consolidate text parts when a thought part is in between" time="0.000180709">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should handle multiple thought parts correctly" time="0.0170305">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; recordHistory &gt; should handle thought part at the end of outputContents" time="0.000451792">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.004653875">
        </testcase>
        <testcase classname="src/core/geminiChat.test.js" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.000243584">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-07-02T17:04:59.294Z" hostname="Adarshs-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.111428042">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessage &gt; should call generateContent with the correct parameters" time="0.088613167">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.002237209">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add user input and a single model output to history" time="0.002950583">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate adjacent model outputs" time="0.000377916">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle a mix of user and model roles in outputContents (though unusual)" time="0.000964583">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should consolidate multiple adjacent model outputs correctly" time="0.000320625">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should not consolidate if roles are different between model outputs" time="0.000779542">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should merge with last history entry if it is also a model output" time="0.000423708">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly merge consolidated new output with existing model history" time="0.000429292">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle empty modelOutput array" time="0.000285209">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle aggregating modelOutput" time="0.00210025">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle modelOutput with parts being undefined or empty (if they pass initial every check)" time="0.000296916">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly handle automaticFunctionCallingHistory" time="0.004766458">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should add userInput if AFC history is present but empty" time="0.00135875">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content from modelOutput" time="0.000513584">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should skip &quot;thought&quot; content even if it is the only content" time="0.000167583">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should correctly consolidate text parts when a thought part is in between" time="0.001029959">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle multiple thought parts correctly" time="0.002138958">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; recordHistory &gt; should handle thought part at the end of outputContents" time="0.000300833">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.000191709">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.000191125">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiRequest.test.js" timestamp="2025-07-02T17:04:59.297Z" hostname="Adarshs-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.002525459">
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should return the string value if the input is a string" time="0.000739833">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should return a concatenated string if the input is an array of strings" time="0.0000765">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle videoMetadata" time="0.00005375">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle thought" time="0.000047333">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle codeExecutionResult" time="0.000042417">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle executableCode" time="0.000039209">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle fileData" time="0.000042542">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle functionCall" time="0.000041">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle functionResponse" time="0.000128083">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle inlineData" time="0.000048084">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should handle text" time="0.000042458">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.js" name="partListUnionToString &gt; should return an empty string for an unknown part type" time="0.00004075">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiRequest.test.ts" timestamp="2025-07-02T17:04:59.299Z" hostname="Adarshs-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.0021795">
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return the string value if the input is a string" time="0.000657708">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return a concatenated string if the input is an array of strings" time="0.0000695">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle videoMetadata" time="0.000049458">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle thought" time="0.00004575">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle codeExecutionResult" time="0.000042333">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle executableCode" time="0.000039084">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle fileData" time="0.000042458">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionCall" time="0.000040667">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle functionResponse" time="0.00004925">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle inlineData" time="0.000044333">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should handle text" time="0.000038">
        </testcase>
        <testcase classname="src/core/geminiRequest.test.ts" name="partListUnionToString &gt; should return an empty string for an unknown part type" time="0.000039208">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.js" timestamp="2025-07-02T17:04:59.300Z" hostname="Adarshs-MacBook-Pro.local" tests="22" failures="0" errors="0" skipped="0" time="0.191233292">
        <testcase classname="src/core/logger.test.js" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.01006875">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.009958458">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.005970917">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; initialize &gt; should be idempotent" time="0.003835959">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.011814417">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.005708833">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.004991542">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.004817791">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.006202458">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.01277425">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.003240125">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.022274667">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.007658959">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.00630475">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint to a tagged file when a tag is provided" time="0.005031166">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.004112625">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; loadCheckpoint &gt; should load from a tagged checkpoint file when a tag is provided" time="0.027234208">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.014831166">
            <system-err>
Failed to read or parse checkpoint file /Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-non-existent-tag.json: Error: ENOENT: no such file or directory, open &apos;/Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-non-existent-tag.json&apos;
[90m    at open (node:internal/fs/promises:638:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1238:14)[39m
    at Logger.loadCheckpoint [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/core/logger.test.ts:456:22
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-non-existent-tag.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.004067042">
            <system-err>
Failed to read or parse checkpoint file /Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-missing.json: Error: ENOENT: no such file or directory, open &apos;/Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-missing.json&apos;
[90m    at open (node:internal/fs/promises:638:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1238:14)[39m
    at Logger.loadCheckpoint [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/core/logger.test.ts:462:22
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-missing.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.004100875">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.005449125">
        </testcase>
        <testcase classname="src/core/logger.test.js" name="Logger &gt; close &gt; should reset logger state" time="0.008023167">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-07-02T17:04:59.304Z" hostname="Adarshs-MacBook-Pro.local" tests="22" failures="0" errors="0" skipped="0" time="0.421008209">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.017764666">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.010293708">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.022151334">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.014680042">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.033723708">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.009233666">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.004452917">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.017822041">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.004385834">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.010754875">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.00803375">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.041906667">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.018934916">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.005451417">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint to a tagged file when a tag is provided" time="0.029208417">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.020230959">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a tagged checkpoint file when a tag is provided" time="0.032511042">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.028955417">
            <system-err>
Failed to read or parse checkpoint file /Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-non-existent-tag.json: Error: ENOENT: no such file or directory, open &apos;/Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-non-existent-tag.json&apos;
[90m    at open (node:internal/fs/promises:638:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1238:14)[39m
    at Logger.loadCheckpoint [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/core/logger.test.ts:456:22
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-non-existent-tag.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.040235917">
            <system-err>
Failed to read or parse checkpoint file /Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-missing.json: Error: ENOENT: no such file or directory, open &apos;/Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-missing.json&apos;
[90m    at open (node:internal/fs/promises:638:25)[39m
[90m    at Object.readFile (node:internal/fs/promises:1238:14)[39m
    at Logger.loadCheckpoint [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/core/logger.ts:269:27[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/core/logger.test.ts:462:22
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-2[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;/Users/adarshkant/.gemini/tmp/362daa2daaabfffe5dc31852eeb832bf5db151f88d054ae2aaebb69c935712dd/checkpoint-missing.json&apos;[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.01164325">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.017331584">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.018007">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.js" timestamp="2025-07-02T17:04:59.307Z" hostname="Adarshs-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.087495583">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.js" name="executeToolCall &gt; should execute a tool successfully" time="0.082248917">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.js" name="executeToolCall &gt; should return an error if tool is not found" time="0.001113084">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.js" name="executeToolCall &gt; should return an error if tool execution fails" time="0.000807125">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.js" name="executeToolCall &gt; should handle cancellation during tool execution" time="0.00133925">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.js" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.000589167">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-07-02T17:04:59.308Z" hostname="Adarshs-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.040599958">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.031457166">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.003495292">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.001265625">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should handle cancellation during tool execution" time="0.000784458">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.000634917">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.js" timestamp="2025-07-02T17:04:59.309Z" hostname="Adarshs-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0.003754125">
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.001721209">
        </testcase>
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.000190667">
        </testcase>
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.000123042">
        </testcase>
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.000159458">
        </testcase>
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.000126208">
        </testcase>
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.000116584">
        </testcase>
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000115833">
        </testcase>
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.000113833">
        </testcase>
        <testcase classname="src/core/prompts.test.js" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.000149667">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-07-02T17:04:59.310Z" hostname="Adarshs-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0.005191375">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.002640958">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.000217166">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.000134125">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.000162458">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.000134375">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.00012125">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000120084">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.000116333">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.000104292">
        </testcase>
    </testsuite>
    <testsuite name="src/core/turn.test.js" timestamp="2025-07-02T17:04:59.311Z" hostname="Adarshs-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.01131625">
        <testcase classname="src/core/turn.test.js" name="Turn &gt; constructor &gt; should initialize pendingToolCalls and debugResponses" time="0.004615167">
        </testcase>
        <testcase classname="src/core/turn.test.js" name="Turn &gt; run &gt; should yield content events for text parts" time="0.002959584">
        </testcase>
        <testcase classname="src/core/turn.test.js" name="Turn &gt; run &gt; should yield tool_call_request events for function calls" time="0.000853042">
        </testcase>
        <testcase classname="src/core/turn.test.js" name="Turn &gt; run &gt; should yield UserCancelled event if signal is aborted" time="0.00038675">
        </testcase>
        <testcase classname="src/core/turn.test.js" name="Turn &gt; run &gt; should yield Error event and report if sendMessageStream throws" time="0.000600542">
        </testcase>
        <testcase classname="src/core/turn.test.js" name="Turn &gt; run &gt; should handle function calls with undefined name or args" time="0.000942">
        </testcase>
        <testcase classname="src/core/turn.test.js" name="Turn &gt; getDebugResponses &gt; should return collected debug responses" time="0.000172875">
        </testcase>
    </testsuite>
    <testsuite name="src/core/turn.test.ts" timestamp="2025-07-02T17:04:59.312Z" hostname="Adarshs-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.005919834">
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; constructor &gt; should initialize pendingToolCalls and debugResponses" time="0.001269583">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield content events for text parts" time="0.001517209">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield tool_call_request events for function calls" time="0.000603042">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield UserCancelled event if signal is aborted" time="0.000236417">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield Error event and report if sendMessageStream throws" time="0.000394125">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle function calls with undefined name or args" time="0.000862959">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; getDebugResponses &gt; should return collected debug responses" time="0.000194667">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.js" timestamp="2025-07-02T17:04:59.312Z" hostname="Adarshs-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.003912667">
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.001339834">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.000119542">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000083583">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.000058958">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.000068083">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.000073792">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.000065375">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.000083375">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.000158625">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.000069708">
        </testcase>
        <testcase classname="src/code_assist/converter.test.js" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.000050333">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-07-02T17:04:59.313Z" hostname="Adarshs-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.00349725">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.001454542">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.0001745">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.000089416">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.000078791">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.000075666">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.00010625">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.000070584">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.000110417">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.000192333">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.000078833">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.00007125">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.js" timestamp="2025-07-02T17:04:59.313Z" hostname="Adarshs-MacBook-Pro.local" tests="1" failures="0" errors="0" skipped="0" time="0.0113655">
        <testcase classname="src/code_assist/oauth2.test.js" name="oauth2 &gt; should perform a web login" time="0.010005">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-07-02T17:04:59.313Z" hostname="Adarshs-MacBook-Pro.local" tests="1" failures="0" errors="0" skipped="0" time="0.017653875">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; should perform a web login" time="0.016154416">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.js" timestamp="2025-07-02T17:04:59.314Z" hostname="Adarshs-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.017264792">
        <testcase classname="src/code_assist/server.test.js" name="CodeAssistServer &gt; should be able to be constructed" time="0.002341833">
        </testcase>
        <testcase classname="src/code_assist/server.test.js" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.00381325">
        </testcase>
        <testcase classname="src/code_assist/server.test.js" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.0009015">
        </testcase>
        <testcase classname="src/code_assist/server.test.js" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.000656459">
        </testcase>
        <testcase classname="src/code_assist/server.test.js" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.00069525">
        </testcase>
        <testcase classname="src/code_assist/server.test.js" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.00088725">
        </testcase>
        <testcase classname="src/code_assist/server.test.js" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.007224334">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-07-02T17:04:59.314Z" hostname="Adarshs-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.015085167">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.001689209">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.002784625">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.002541334">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.002323458">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.001264334">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.001353916">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.001867125">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.js" timestamp="2025-07-02T17:04:59.315Z" hostname="Adarshs-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0.009566334">
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default" time="0.002407125">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; initialization &gt; should not initialize git ignore parser when not a git repo" time="0.000217625">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored files by default" time="0.001312209">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.001151541">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.000568333">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return true for git-ignored files" time="0.00107875">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return false for non-ignored files" time="0.000241375">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.001252333">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.js" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.000275542">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-07-02T17:04:59.315Z" hostname="Adarshs-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0.006691625">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default" time="0.002250625">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not initialize git ignore parser when not a git repo" time="0.000781708">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored files by default" time="0.001113958">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.0002925">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.000149708">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return true for git-ignored files" time="0.000206">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &gt; should return false for non-ignored files" time="0.000143625">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.000189084">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.00015325">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.js" timestamp="2025-07-02T17:04:59.316Z" hostname="Adarshs-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0.010983125">
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; constructor &gt; should successfully create an instance if projectRoot is a Git repository" time="0.003249208">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.001567834">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.000753834">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; initialize &gt; should throw an error if projectRoot is not a Git repository" time="0.000648875">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.000167166">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.000337375">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.000818667">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.000540292">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.000181917">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.000108416">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.000215292">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.00022525">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.00030625">
        </testcase>
        <testcase classname="src/services/gitService.test.js" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.000143916">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-07-02T17:04:59.317Z" hostname="Adarshs-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0.012109791">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance if projectRoot is a Git repository" time="0.002067708">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.000515208">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.000173958">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if projectRoot is not a Git repository" time="0.000943708">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.000548042">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.000901792">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.00221925">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.001962125">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.000243">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.000210458">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.000168958">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.000219125">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.000208875">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.000100542">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.js" timestamp="2025-07-02T17:04:59.318Z" hostname="Adarshs-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.082986958">
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.069446917">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.002559542">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.001837708">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.001479792">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.000826166">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.000653625">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.00052725">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.001045917">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.000806167">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.000724459">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.000634541">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.js" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.001378834">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-07-02T17:04:59.320Z" hostname="Adarshs-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.0516155">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.033609791">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.001112583">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.001392958">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.004816875">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with an error" time="0.001128875">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.000783625">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.000565">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.001264083">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.000969083">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.000792875">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.001065125">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.001908666">
            <system-out>
Flushing log events to Clearcut.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.js" timestamp="2025-07-02T17:04:59.323Z" hostname="Adarshs-MacBook-Pro.local" tests="8" failures="0" errors="0" skipped="0" time="0.073061375">
        <testcase classname="src/telemetry/metrics.test.js" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.005373416">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.js" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.010664125">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.js" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.013017625">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.js" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.0117685">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.js" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.00876125">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.js" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.005618834">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.js" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.009345459">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.js" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.006273">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-07-02T17:04:59.325Z" hostname="Adarshs-MacBook-Pro.local" tests="8" failures="0" errors="0" skipped="0" time="0.046962166">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.005554459">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.005295375">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.007563541">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.004637083">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.006662708">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.007098667">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.005264667">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.002923459">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.js" timestamp="2025-07-02T17:04:59.326Z" hostname="Adarshs-MacBook-Pro.local" tests="2" failures="0" errors="0" skipped="0" time="0.007861959">
        <testcase classname="src/telemetry/telemetry.test.js" name="telemetry &gt; should initialize the telemetry service" time="0.005564084">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/telemetry.test.js" name="telemetry &gt; should shutdown the telemetry service" time="0.001603875">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-07-02T17:04:59.327Z" hostname="Adarshs-MacBook-Pro.local" tests="2" failures="0" errors="0" skipped="0" time="0.007598708">
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should initialize the telemetry service" time="0.0052075">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should shutdown the telemetry service" time="0.0017035">
            <system-out>
OpenTelemetry SDK started successfully.

OpenTelemetry SDK shut down successfully.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.js" timestamp="2025-07-02T17:04:59.328Z" hostname="Adarshs-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.009770458">
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; should have correct initial metrics" time="0.001806833">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.001851459">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.0003345">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.000237875">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.000259916">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.000431375">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.000188709">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.001136917">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.00055725">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.000247417">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.00026175">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.00048925">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.js" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.000635709">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-07-02T17:04:59.329Z" hostname="Adarshs-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.004799458">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.001143917">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.000950541">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.000128375">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.000098458">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.00010975">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.000185125">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.000076709">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.000501125">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.000304583">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.000105583">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.000100792">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.000160667">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.000147417">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.js" timestamp="2025-07-02T17:04:59.329Z" hostname="Adarshs-MacBook-Pro.local" tests="29" failures="0" errors="0" skipped="0" time="0.0331405">
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; _applyReplacement &gt; should return newString if isNewFile is true" time="0.003616625">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; _applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.000646875">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; _applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.000415458">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; _applyReplacement &gt; should replace oldString with newString in currentContent" time="0.00039225">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; _applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.000384791">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.000575167">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.000663167">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.000529333">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; shouldConfirmExecute &gt; should return false if params are invalid" time="0.001206625">
            <system-err>
[EditTool Wrapper] Attempted confirmation with invalid parameters: File path must be absolute: relative.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.002206875">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found (ensureCorrectEdit returns 0)" time="0.000888375">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found (ensureCorrectEdit returns &gt; 1)" time="0.000772875">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.00051325">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0.000784458">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should return error if params are invalid" time="0.000481583">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.001265416">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.0011445">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.000864334">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.000922166">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.003164417">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.000826125">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.000679583">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.002850292">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.001621792">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.001437333">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.000543458">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.000371417">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.000778334">
        </testcase>
        <testcase classname="src/tools/edit.test.js" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.0013025">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-07-02T17:04:59.331Z" hostname="Adarshs-MacBook-Pro.local" tests="29" failures="0" errors="0" skipped="0" time="0.047475459">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if isNewFile is true" time="0.002413125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.00058">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.00078125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should replace oldString with newString in currentContent" time="0.000415208">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; _applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.001391292">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.001688417">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.001663208">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001577541">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if params are invalid" time="0.001751292">
            <system-err>
[EditTool Wrapper] Attempted confirmation with invalid parameters: File path must be absolute: relative.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.004246">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found (ensureCorrectEdit returns 0)" time="0.00103475">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found (ensureCorrectEdit returns &gt; 1)" time="0.002397334">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.001055958">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0.001033167">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if params are invalid" time="0.000556583">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.001346417">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.001274583">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.00321875">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.002476458">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.00328525">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.000785125">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.000666542">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.002607583">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.004044">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.000993417">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.000473459">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.000369584">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.000349584">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.000355083">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.js" timestamp="2025-07-02T17:04:59.333Z" hostname="Adarshs-MacBook-Pro.local" tests="27" failures="0" errors="0" skipped="0" time="1.437331792">
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.1123865">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.096194042">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.072179084">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.065637958">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.066833167">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.068734625">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.070616584">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.072119666">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.084603541">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.06146175">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.059031125">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.05799925">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.059933834">
            <system-err>
Missing required field: pattern

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.061554625">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.071257583">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return error if path is provided but is not a string (schema validation)" time="0.059612458">
            <system-err>
Type mismatch for property &quot;path&quot;: expected string, got number

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return error if case_sensitive is provided but is not a boolean (schema validation)" time="0.061397583">
            <system-err>
Type mismatch for property &quot;case_sensitive&quot;: expected boolean, got string

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.071850291">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.061734333">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.087925583">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.009491708">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.000506209">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.000179667">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="sortFileEntries &gt; should handle an empty array" time="0.000060875">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.000066083">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.000902042">
        </testcase>
        <testcase classname="src/tools/glob.test.js" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.000483084">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-07-02T17:04:59.335Z" hostname="Adarshs-MacBook-Pro.local" tests="27" failures="0" errors="0" skipped="0" time="1.452156">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.104437916">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.079320375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.069432416">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.077957833">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.078748875">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.078267583">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.058882667">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.058534041">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.058936375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.058273791">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.073266375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.065485083">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.060488666">
            <system-err>
Missing required field: pattern

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.070501875">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.065976792">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if path is provided but is not a string (schema validation)" time="0.075557416">
            <system-err>
Type mismatch for property &quot;path&quot;: expected string, got number

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if case_sensitive is provided but is not a boolean (schema validation)" time="0.064034375">
            <system-err>
Type mismatch for property &quot;case_sensitive&quot;: expected boolean, got string

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.094553458">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.080168292">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.064116375">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.012032916">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.000167291">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.000075125">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.000049209">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.000057292">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.000432834">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.000066875">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.js" timestamp="2025-07-02T17:04:59.336Z" hostname="Adarshs-MacBook-Pro.local" tests="20" failures="0" errors="0" skipped="0" time="0.189674833">
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.017222375">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.007614125">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.011417667">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.006378708">
            <system-err>
Missing required field: pattern

            </system-err>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.00574425">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.0050415">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.007006167">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.020792542">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.00936925">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.016493791">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.021705292">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.011434292">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.012008792">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.007620709">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; execute &gt; should return an error if params are invalid" time="0.004713375">
            <system-err>
Missing required field: pattern

            </system-err>
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.004201125">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.003759291">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.005359875">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.00424275">
        </testcase>
        <testcase classname="src/tools/grep.test.js" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.004874583">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-07-02T17:04:59.338Z" hostname="Adarshs-MacBook-Pro.local" tests="20" failures="0" errors="0" skipped="0" time="0.4295125">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.024740084">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.005282333">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.007391125">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.006897375">
            <system-err>
Missing required field: pattern

            </system-err>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.006892166">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.018959709">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.018263708">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.067427583">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.042858208">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.024942458">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.016061333">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.037988041">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.023196708">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.059882541">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return an error if params are invalid" time="0.006176625">
            <system-err>
Missing required field: pattern

            </system-err>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.009229625">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.009665292">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.011695625">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.016370584">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.013223791">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.js" timestamp="2025-07-02T17:04:59.339Z" hostname="Adarshs-MacBook-Pro.local" tests="20" failures="0" errors="0" skipped="0" time="0.015327125">
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should do nothing if no MCP servers or command are configured" time="0.00141225">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should discover tools via mcpServerCommand" time="0.003421917">
            <system-out>
No tools registered from MCP server &apos;mcp&apos;. Closing connection.

            </system-out>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should discover tools via mcpServers config (stdio)" time="0.001302459">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should discover tools via mcpServers config (sse)" time="0.000421959">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should discover tools via mcpServers config (streamable http)" time="0.000396667">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; StreamableHTTPClientTransport headers &gt; should pass headers when provided" time="0.000469333">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; StreamableHTTPClientTransport headers &gt; should work without headers (backwards compatibility)" time="0.000210625">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should prefix tool names if multiple MCP servers are configured" time="0.001130083">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should clean schema properties ($schema, additionalProperties)" time="0.000786709">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should handle error if mcpServerCommand parsing fails" time="0.000931125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should log error and skip server if config is invalid (missing url and command)" time="0.000481166">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should log error and skip server if mcpClient.connect fails" time="0.000555333">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should log error and skip server if mcpClient.listTools fails" time="0.000876584">
            <system-out>
No tools registered from MCP server &apos;fail-list-server&apos;. Closing connection.

            </system-out>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="discoverMcpTools &gt; should assign mcpClient.onerror handler" time="0.000788917">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="sanitizeParameters &gt; should do nothing for an undefined schema" time="0.000044209">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="sanitizeParameters &gt; should remove default when anyOf is present" time="0.000068333">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="sanitizeParameters &gt; should recursively sanitize items in anyOf" time="0.000051541">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="sanitizeParameters &gt; should recursively sanitize items in items" time="0.000043166">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="sanitizeParameters &gt; should recursively sanitize items in properties" time="0.000042625">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.js" name="sanitizeParameters &gt; should handle complex nested schemas" time="0.000063166">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-07-02T17:04:59.340Z" hostname="Adarshs-MacBook-Pro.local" tests="20" failures="0" errors="0" skipped="0" time="0.013204041">
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should do nothing if no MCP servers or command are configured" time="0.001400209">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should discover tools via mcpServerCommand" time="0.002959083">
            <system-out>
No tools registered from MCP server &apos;mcp&apos;. Closing connection.

            </system-out>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should discover tools via mcpServers config (stdio)" time="0.000554">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should discover tools via mcpServers config (sse)" time="0.000511459">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should discover tools via mcpServers config (streamable http)" time="0.000439042">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; StreamableHTTPClientTransport headers &gt; should pass headers when provided" time="0.000753084">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; StreamableHTTPClientTransport headers &gt; should work without headers (backwards compatibility)" time="0.000310125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should prefix tool names if multiple MCP servers are configured" time="0.000996583">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should clean schema properties ($schema, additionalProperties)" time="0.001388125">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should handle error if mcpServerCommand parsing fails" time="0.000990042">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should log error and skip server if config is invalid (missing url and command)" time="0.000374166">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should log error and skip server if mcpClient.connect fails" time="0.000409667">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should log error and skip server if mcpClient.listTools fails" time="0.000470916">
            <system-out>
No tools registered from MCP server &apos;fail-list-server&apos;. Closing connection.

            </system-out>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="discoverMcpTools &gt; should assign mcpClient.onerror handler" time="0.000365167">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="sanitizeParameters &gt; should do nothing for an undefined schema" time="0.0000385">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="sanitizeParameters &gt; should remove default when anyOf is present" time="0.000067083">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in anyOf" time="0.000053083">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in items" time="0.000041667">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="sanitizeParameters &gt; should recursively sanitize items in properties" time="0.000043542">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="sanitizeParameters &gt; should handle complex nested schemas" time="0.000066">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.js" timestamp="2025-07-02T17:04:59.341Z" hostname="Adarshs-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.005758292">
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (non-generic server)" time="0.002336667">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (generic &quot;mcp&quot; server)" time="0.000171958">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.000063958">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.000918833">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.000082042">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.000424541">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.000161375">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.000065667">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.000068375">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.000228208">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.000116916">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.js" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.000092166">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-07-02T17:04:59.342Z" hostname="Adarshs-MacBook-Pro.local" tests="12" failures="0" errors="0" skipped="0" time="0.0103245">
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (non-generic server)" time="0.0031165">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly (generic &quot;mcp&quot; server)" time="0.000100125">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should accept and store a custom timeout" time="0.000068416">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.002571167">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.000441">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.001779">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.00017325">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.000078375">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.000075875">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.00016">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.000182333">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.000096375">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.js" timestamp="2025-07-02T17:04:59.343Z" hostname="Adarshs-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0.010791417">
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.001445583">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.000195958">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.000489541">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.000951208">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.0001455">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.000119958">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.000108917">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.000169375">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.000091334">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.003929334">
            <system-err>
[MemoryTool] Error adding memory entry to /mock/home/.gemini/GEMINI.md: Error: Disk full
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/tools/memoryTool.test.ts:170:49
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.000738833">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success" time="0.000400584">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.000206">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.js" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.000269417">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot;: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-07-02T17:04:59.344Z" hostname="Adarshs-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0.025347334">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.0024145">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.000213041">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.0004565">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.001044416">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.0002445">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.000127666">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.000110959">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.0001115">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.000095542">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.013174417">
            <system-err>
[MemoryTool] Error adding memory entry to /mock/home/.gemini/GEMINI.md: Error: Disk full
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/tools/memoryTool.test.ts:170:49
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.001369">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success" time="0.00235025">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.00024425">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.001754792">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot;: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.js" timestamp="2025-07-02T17:04:59.344Z" hostname="Adarshs-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.018600458">
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.005863917">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.001278625">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.000502875">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.000553875">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.000490209">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.003748958">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.00285425">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.001007">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.000455667">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.000424792">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.js" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.000283375">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-07-02T17:04:59.345Z" hostname="Adarshs-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.022876875">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.00453725">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.000610084">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.00043375">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.000934208">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.000986459">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.006291333">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.006158458">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.000743792">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.000434084">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.000185916">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.000146958">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.js" timestamp="2025-07-02T17:04:59.346Z" hostname="Adarshs-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.041155416">
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params (absolute path within root)" time="0.007417917">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params with offset and limit" time="0.0023805">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.001180083">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.000707084">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; validateToolParams &gt; should return error for negative offset" time="0.001337708">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; validateToolParams &gt; should return error for non-positive limit" time="0.002025167">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; validateToolParams &gt; should return error for schema validation failure (e.g. missing path)" time="0.00245025">
            <system-err>
Missing required field: absolute_path

            </system-err>
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; getDescription &gt; should return a shortened, relative path" time="0.000872833">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.00161625">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; execute &gt; should return validation error if params are invalid" time="0.001775209">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; execute &gt; should return error from processSingleFileContent if it fails" time="0.002721625">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.001523667">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; execute &gt; should return success result for an image file" time="0.001783125">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; execute &gt; should pass offset and limit to processSingleFileContent" time="0.003789791">
        </testcase>
        <testcase classname="src/tools/read-file.test.js" name="ReadFileTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.00139175">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-07-02T17:04:59.347Z" hostname="Adarshs-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.0259145">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params (absolute path within root)" time="0.003563125">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return null for valid params with offset and limit" time="0.001817375">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.00057775">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.000814417">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for negative offset" time="0.000645334">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for non-positive limit" time="0.000465625">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; validateToolParams &gt; should return error for schema validation failure (e.g. missing path)" time="0.001023416">
            <system-err>
Missing required field: absolute_path

            </system-err>
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return a shortened, relative path" time="0.000548583">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.000631">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return validation error if params are invalid" time="0.000558916">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error from processSingleFileContent if it fails" time="0.006678583">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.004763042">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for an image file" time="0.00086325">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should pass offset and limit to processSingleFileContent" time="0.000540334">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.000585542">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.js" timestamp="2025-07-02T17:04:59.348Z" hostname="Adarshs-MacBook-Pro.local" tests="22" failures="0" errors="0" skipped="0" time="0.167117167">
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid relative paths within root" time="0.005676583">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid glob patterns within root" time="0.004313333">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return null for paths trying to escape the root (e.g., ../) as execute handles this" time="0.002845958">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return null for absolute paths as execute handles this" time="0.0007525">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array is empty" time="0.000699167">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid exclude and include patterns" time="0.000541042">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array contains an empty string" time="0.000598917">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return error if include array contains non-string elements" time="0.000479375">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; validateParams &gt; should return error if exclude array contains non-string elements" time="0.000480541">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.014295334">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.018364625">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.008957209">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.006842666">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should handle non-existent specific files gracefully" time="0.002857459">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.013238375">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.016402584">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.029776458">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.00432475">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.018242334">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.004184125">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.003334833">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.js" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.008720541">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-07-02T17:04:59.349Z" hostname="Adarshs-MacBook-Pro.local" tests="22" failures="0" errors="0" skipped="0" time="0.153969166">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid relative paths within root" time="0.003018667">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid glob patterns within root" time="0.000875958">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for paths trying to escape the root (e.g., ../) as execute handles this" time="0.002105292">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for absolute paths as execute handles this" time="0.001820833">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array is empty" time="0.001677791">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return null for valid exclude and include patterns" time="0.000767167">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if paths array contains an empty string" time="0.000544667">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if include array contains non-string elements" time="0.001273667">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; validateParams &gt; should return error if exclude array contains non-string elements" time="0.001144083">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.010833583">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.00703875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.014961125">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.006501">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle non-existent specific files gracefully" time="0.003698833">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.005798667">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.004482291">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.006359">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.033622708">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.017806625">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.01509875">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.007309334">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.005138833">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.js" timestamp="2025-07-02T17:04:59.350Z" hostname="Adarshs-MacBook-Pro.local" tests="32" failures="0" errors="0" skipped="0" time="0.006034458">
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow a command if no restrictions are provided" time="0.001848">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow a command if it is in the allowed list" time="0.000218584">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command if it is not in the allowed list" time="0.000071375">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command if it is in the blocked list" time="0.000064542">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow a command if it is not in the blocked list" time="0.000197042">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command if it is in both the allowed and blocked lists" time="0.000202542">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow any command when ShellTool is in coreTools without specific commands" time="0.000131208">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block any command when ShellTool is in excludeTools without specific commands" time="0.000162292">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow a command if it is in the allowed list using the public-facing name" time="0.000079916">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command if it is in the blocked list using the public-facing name" time="0.000061458">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block any command when ShellTool is in excludeTools using the public-facing name" time="0.000053542">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list using the public-facing name" time="0.000184333">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list" time="0.0001565">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command with extra whitespace if it is in the blocked list" time="0.000241625">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow any command when ShellTool is present with specific commands" time="0.000075541">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command on the blocklist even with a wildcard allow" time="0.000081209">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow a command that starts with an allowed command prefix" time="0.000066875">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow a command that starts with an allowed command prefix using the public-facing name" time="0.000053042">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should not allow a command that starts with an allowed command prefix but is chained with another command" time="0.000053333">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should not allow a command that is a prefix of an allowed command" time="0.000053042">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should not allow a command that is a prefix of a blocked command" time="0.000048833">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should not allow a command that is chained with a pipe" time="0.000052125">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should not allow a command that is chained with a semicolon" time="0.000188084">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a chained command if any part is blocked" time="0.000060667">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command if its prefix is on the blocklist, even if the command itself is on the allowlist" time="0.00005125">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should be case-sensitive in its matching" time="0.000046791">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should correctly handle commands with extra whitespace around chaining operators" time="0.000048208">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow a chained command if all parts are allowed" time="0.00004925">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command with command substitution using backticks" time="0.000038708">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should block a command with command substitution using $()" time="0.000036292">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should allow a command with I/O redirection" time="0.000191333">
        </testcase>
        <testcase classname="src/tools/shell.test.js" name="ShellTool &gt; should not allow a command that is chained with a double pipe" time="0.000190667">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-07-02T17:04:59.352Z" hostname="Adarshs-MacBook-Pro.local" tests="32" failures="0" errors="0" skipped="0" time="0.003830792">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if no restrictions are provided" time="0.000902375">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list" time="0.000148667">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is not in the allowed list" time="0.000105083">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list" time="0.000388">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is not in the blocked list" time="0.000070375">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in both the allowed and blocked lists" time="0.000056125">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is in coreTools without specific commands" time="0.000054208">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools without specific commands" time="0.000048541">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command if it is in the allowed list using the public-facing name" time="0.000054833">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if it is in the blocked list using the public-facing name" time="0.000049083">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command when ShellTool is in excludeTools using the public-facing name" time="0.000044291">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list using the public-facing name" time="0.000051084">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block any command if coreTools contains an empty ShellTool command list" time="0.000049042">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with extra whitespace if it is in the blocked list" time="0.000047541">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow any command when ShellTool is present with specific commands" time="0.000047">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command on the blocklist even with a wildcard allow" time="0.000058709">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix" time="0.000055667">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command that starts with an allowed command prefix using the public-facing name" time="0.000077792">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that starts with an allowed command prefix but is chained with another command" time="0.000048833">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of an allowed command" time="0.000048625">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is a prefix of a blocked command" time="0.000047">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a pipe" time="0.0000495">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a semicolon" time="0.000123958">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a chained command if any part is blocked" time="0.000055958">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command if its prefix is on the blocklist, even if the command itself is on the allowlist" time="0.000048334">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should be case-sensitive in its matching" time="0.000045459">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should correctly handle commands with extra whitespace around chaining operators" time="0.000047958">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a chained command if all parts are allowed" time="0.000046708">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with command substitution using backticks" time="0.00003675">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should block a command with command substitution using $()" time="0.000035708">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should allow a command with I/O redirection" time="0.000044625">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; should not allow a command that is chained with a double pipe" time="0.000046542">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.js" timestamp="2025-07-02T17:04:59.354Z" hostname="Adarshs-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.096597875">
        <testcase classname="src/tools/tool-registry.test.js" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.085148916">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.js" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.001457542">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.js" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name" time="0.002201583">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.js" name="ToolRegistry &gt; discoverTools &gt; should discover tools using discovery command" time="0.003681583">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.js" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.001197959">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.js" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP server command from getMcpServerCommand" time="0.000889042">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.js" name="ToolRegistry &gt; discoverTools &gt; should handle errors during MCP client connection gracefully and close transport" time="0.001231291">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-07-02T17:04:59.354Z" hostname="Adarshs-MacBook-Pro.local" tests="7" failures="0" errors="0" skipped="0" time="0.042891625">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.036007625">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.001354166">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name" time="0.001285417">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using discovery command" time="0.001181292">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.000889959">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP server command from getMcpServerCommand" time="0.000584041">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should handle errors during MCP client connection gracefully and close transport" time="0.0006775">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.js" timestamp="2025-07-02T17:04:59.355Z" hostname="Adarshs-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.008046083">
        <testcase classname="src/tools/web-fetch.test.js" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.0026415">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.js" name="WebFetchTool &gt; shouldConfirmExecute &gt; should convert github urls to raw format" time="0.003413916">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.js" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.000167667">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.js" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.000930666">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-07-02T17:04:59.355Z" hostname="Adarshs-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.003231667">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.001399875">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should convert github urls to raw format" time="0.000117084">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.000107083">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.000811209">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.js" timestamp="2025-07-02T17:04:59.355Z" hostname="Adarshs-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.038188208">
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; validateToolParams &gt; should return null for valid absolute path within root" time="0.003952792">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.0004695">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.000307625">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; validateToolParams &gt; should return error if path is a directory" time="0.000570833">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectFileContent for a new file" time="0.002386541">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectEdit for an existing file" time="0.002053042">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.00325425">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (relative path)" time="0.00122925">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (outside root)" time="0.000984833">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.002441">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file (with corrected content)" time="0.003656125">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file (with corrected content)" time="0.002332917">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (relative path)" time="0.000567583">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (path outside root)" time="0.000360041">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.001624667">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should write a new file with corrected content and return diff" time="0.00286375">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should overwrite an existing file with corrected content and return diff" time="0.003572083">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.001687208">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.000782625">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.001093708">
        </testcase>
        <testcase classname="src/tools/write-file.test.js" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.000830042">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-07-02T17:04:59.356Z" hostname="Adarshs-MacBook-Pro.local" tests="21" failures="0" errors="0" skipped="0" time="0.0380415">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return null for valid absolute path within root" time="0.005012625">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for relative path" time="0.00122825">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error for path outside root" time="0.001113375">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; validateToolParams &gt; should return error if path is a directory" time="0.001156708">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectFileContent for a new file" time="0.001558208">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should call ensureCorrectEdit for an existing file" time="0.0010025">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; _getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.002267375">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (relative path)" time="0.000470209">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if params are invalid (outside root)" time="0.000331708">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.000748291">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file (with corrected content)" time="0.001375625">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file (with corrected content)" time="0.000873458">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (relative path)" time="0.000485542">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if params are invalid (path outside root)" time="0.000319625">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.008368833">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file with corrected content and return diff" time="0.002554541">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file with corrected content and return diff" time="0.002653791">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.0013215">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.001098708">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.001407834">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.000756083">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.js" timestamp="2025-07-02T17:04:59.358Z" hostname="Adarshs-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.017077">
        <testcase classname="src/utils/bfsFileSearch.test.js" name="bfsFileSearch &gt; should find a file in the root directory" time="0.00625875">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.js" name="bfsFileSearch &gt; should find a file in a subdirectory" time="0.002358625">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.js" name="bfsFileSearch &gt; should ignore specified directories" time="0.00195825">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.js" name="bfsFileSearch &gt; should respect maxDirs limit" time="0.000694792">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.js" name="bfsFileSearch &gt; should respect .gitignore files" time="0.002944083">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-07-02T17:04:59.358Z" hostname="Adarshs-MacBook-Pro.local" tests="5" failures="0" errors="0" skipped="0" time="0.012647917">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.002362834">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a subdirectory" time="0.001806375">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore specified directories" time="0.002371334">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect maxDirs limit" time="0.002149583">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect .gitignore files" time="0.002812125">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editCorrector.test.js" timestamp="2025-07-02T17:04:59.358Z" hostname="Adarshs-MacBook-Pro.local" tests="39" failures="0" errors="0" skipped="0" time="0.013703">
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty string" time="0.000789375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty substring" time="0.000082667">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; countOccurrences &gt; should return 0 if substring is not found" time="0.00005125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; countOccurrences &gt; should return 1 if substring is found once" time="0.000043541">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; countOccurrences &gt; should return correct count for multiple occurrences" time="0.000054208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; countOccurrences &gt; should count non-overlapping occurrences" time="0.000049792">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; countOccurrences &gt; should correctly count occurrences when substring is longer" time="0.000037167">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; countOccurrences &gt; should be case sensitive" time="0.000047375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should unescape common sequences" time="0.000176709">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple escaped sequences" time="0.0000425">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter already correct sequences" time="0.000048458">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle mixed correct and incorrect sequences" time="0.000037583">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle backslash followed by actual newline character" time="0.000050584">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple backslashes before an escapable character (aggressive unescaping)" time="0.000166917">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should return empty string for empty input" time="0.000036833">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter strings with no targeted escape sequences" time="0.000045625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should correctly process strings with some targeted escapes" time="0.00003325">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle complex cases with mixed slashes and characters" time="0.000036209">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes" time="0.000054417">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes mixed with other escapes (aggressive unescaping)" time="0.000043792">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.1: old_string (no literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.001374">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.2: old_string (no literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000524458">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.3: old_string (with literal \), new_string (escaped by Gemini) -&gt; new_string unchanged (still escaped)" time="0.000432208">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.4: old_string (with literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000329083">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.1: old_string (over-escaped, no intended literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.001619458">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.2: old_string (over-escaped, no intended literal \), new_string (correctly formatted) -&gt; new_string unescaped (harmlessly)" time="0.000327625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.3: old_string (over-escaped, with intended literal \), new_string (simple) -&gt; new_string corrected" time="0.000410083">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.1: old_string (no literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is double unescaped" time="0.000325833">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.2: old_string (with literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is unescaped once" time="0.000389334">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.3: old_string needs LLM, new_string is fine -&gt; old_string corrected, new_string original" time="0.000376083">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.4: LLM correction path, correctNewString returns the originalNewString it was passed (which was unescaped) -&gt; final new_string is unescaped" time="0.000303375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.1: No version of old_string (original, unescaped, LLM-corrected) matches -&gt; returns original params, 0 occurrences" time="0.000643125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.2: unescapedOldStringAttempt results in &gt;1 occurrences -&gt; returns original params, count occurrences" time="0.000340459">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 5: Specific unescapeStringForGeminiBug checks (integrated into ensureCorrectEdit) &gt; Test 5.1: old_string needs LLM to become currentContent, new_string also needs correction" time="0.000507708">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectFileContent &gt; should return content unchanged if no escaping issues detected" time="0.000686083">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectFileContent &gt; should call correctStringEscaping for potentially escaped content" time="0.000958292">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle correctStringEscaping returning corrected content via correct property name" time="0.000652084">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectFileContent &gt; should return original content if LLM correction fails" time="0.000279583">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.js" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle various escape sequences that need correction" time="0.0003355">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editCorrector.test.ts" timestamp="2025-07-02T17:04:59.360Z" hostname="Adarshs-MacBook-Pro.local" tests="39" failures="0" errors="0" skipped="0" time="0.017486208">
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty string" time="0.001319959">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty substring" time="0.000102334">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 if substring is not found" time="0.00005325">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 1 if substring is found once" time="0.00004675">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return correct count for multiple occurrences" time="0.000056459">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should count non-overlapping occurrences" time="0.000051958">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should correctly count occurrences when substring is longer" time="0.000042958">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should be case sensitive" time="0.000050834">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should unescape common sequences" time="0.00021325">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple escaped sequences" time="0.000041625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter already correct sequences" time="0.000085833">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle mixed correct and incorrect sequences" time="0.000064917">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle backslash followed by actual newline character" time="0.000069833">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple backslashes before an escapable character (aggressive unescaping)" time="0.00017475">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should return empty string for empty input" time="0.000042375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter strings with no targeted escape sequences" time="0.000047625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should correctly process strings with some targeted escapes" time="0.00003675">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle complex cases with mixed slashes and characters" time="0.000034916">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes" time="0.000225625">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes mixed with other escapes (aggressive unescaping)" time="0.00005125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.1: old_string (no literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.001069125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.2: old_string (no literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000398541">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.3: old_string (with literal \), new_string (escaped by Gemini) -&gt; new_string unchanged (still escaped)" time="0.00033325">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.4: old_string (with literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000329291">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.1: old_string (over-escaped, no intended literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.004550375">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.2: old_string (over-escaped, no intended literal \), new_string (correctly formatted) -&gt; new_string unescaped (harmlessly)" time="0.000481167">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.3: old_string (over-escaped, with intended literal \), new_string (simple) -&gt; new_string corrected" time="0.00044725">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.1: old_string (no literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is double unescaped" time="0.000593708">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.2: old_string (with literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is unescaped once" time="0.000450708">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.3: old_string needs LLM, new_string is fine -&gt; old_string corrected, new_string original" time="0.000326583">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.4: LLM correction path, correctNewString returns the originalNewString it was passed (which was unescaped) -&gt; final new_string is unescaped" time="0.000308666">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.1: No version of old_string (original, unescaped, LLM-corrected) matches -&gt; returns original params, 0 occurrences" time="0.000701333">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.2: unescapedOldStringAttempt results in &gt;1 occurrences -&gt; returns original params, count occurrences" time="0.000338125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 5: Specific unescapeStringForGeminiBug checks (integrated into ensureCorrectEdit) &gt; Test 5.1: old_string needs LLM to become currentContent, new_string also needs correction" time="0.000337167">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return content unchanged if no escaping issues detected" time="0.0004415">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should call correctStringEscaping for potentially escaped content" time="0.000388583">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle correctStringEscaping returning corrected content via correct property name" time="0.000559834">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return original content if LLM correction fails" time="0.000259125">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle various escape sequences that need correction" time="0.000251708">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.js" timestamp="2025-07-02T17:04:59.362Z" hostname="Adarshs-MacBook-Pro.local" tests="83" failures="0" errors="0" skipped="0" time="0.028194959">
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code&quot; command exists on non-windows" time="0.00530175">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code&quot; command does not exist on non-windows" time="0.000163125">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code.cmd&quot; command exists on windows" time="0.000199">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code.cmd&quot; command does not exist on windows" time="0.000079917">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium&quot; command exists on non-windows" time="0.000193708">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium&quot; command does not exist on non-windows" time="0.000058875">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium.cmd&quot; command exists on windows" time="0.000086375">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium.cmd&quot; command does not exist on windows" time="0.0000535">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on non-windows" time="0.000333208">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on non-windows" time="0.000402083">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on windows" time="0.000137541">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on windows" time="0.0000675">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on non-windows" time="0.000089334">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on non-windows" time="0.00005575">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on windows" time="0.000084791">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on windows" time="0.000052">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on non-windows" time="0.000088459">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on non-windows" time="0.000049375">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on windows" time="0.000082834">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on windows" time="0.000074125">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on non-windows" time="0.00022275">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on non-windows" time="0.000120583">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on windows" time="0.000104083">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on windows" time="0.00005475">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on non-windows" time="0.000088292">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on non-windows" time="0.000050917">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on windows" time="0.000081459">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on windows" time="0.001272833">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on non-windows" time="0.000253667">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on windows" time="0.000078041">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on non-windows" time="0.000057166">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on windows" time="0.000051541">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on non-windows" time="0.00011925">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on windows" time="0.000069917">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on non-windows" time="0.000050792">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on windows" time="0.000049792">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on non-windows" time="0.000049834">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on windows" time="0.000046542">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.000078125">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.000056584">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.000058833">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.0008525">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.000733583">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.000622959">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.000472458">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.000406958">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.00039775">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.000723583">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.000246875">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.000114667">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.000172167">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.000113125">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.000421958">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.000990708">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.00048">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.000495708">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.000704792">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.000575083">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.000351583">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.000295958">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.001211917">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.0006495">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.000512">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.000114792">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.000073666">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.000067833">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.000062334">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.000056166">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.000059334">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.000136625">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.000056916">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.000192417">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.000242417">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.000175333">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.000364959">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.000157625">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000177167">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.000287708">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.000423458">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.000472459">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.0001115">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.000078083">
        </testcase>
        <testcase classname="src/utils/editor.test.js" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.000242042">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-07-02T17:04:59.366Z" hostname="Adarshs-MacBook-Pro.local" tests="83" failures="0" errors="0" skipped="0" time="0.014952041">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code&quot; command exists on non-windows" time="0.002430625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code&quot; command does not exist on non-windows" time="0.0004295">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if &quot;code.cmd&quot; command exists on windows" time="0.000291125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if &quot;code.cmd&quot; command does not exist on windows" time="0.000104167">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium&quot; command exists on non-windows" time="0.000223416">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium&quot; command does not exist on non-windows" time="0.00014575">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if &quot;codium.cmd&quot; command exists on windows" time="0.000142208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if &quot;codium.cmd&quot; command does not exist on windows" time="0.000084708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on non-windows" time="0.000089">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on non-windows" time="0.000126583">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if &quot;windsurf&quot; command exists on windows" time="0.000086666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if &quot;windsurf&quot; command does not exist on windows" time="0.0000515">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on non-windows" time="0.000080958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on non-windows" time="0.000049209">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if &quot;cursor&quot; command exists on windows" time="0.000079292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if &quot;cursor&quot; command does not exist on windows" time="0.000049916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on non-windows" time="0.0013405">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on non-windows" time="0.000079291">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if &quot;vim&quot; command exists on windows" time="0.000095666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if &quot;vim&quot; command does not exist on windows" time="0.000051084">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on non-windows" time="0.000085792">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on non-windows" time="0.000050417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if &quot;nvim&quot; command exists on windows" time="0.000076959">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if &quot;nvim&quot; command does not exist on windows" time="0.000048708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on non-windows" time="0.000080625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on non-windows" time="0.000047667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if &quot;zed&quot; command exists on windows" time="0.000075417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if &quot;zed&quot; command does not exist on windows" time="0.000047291">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on non-windows" time="0.0002075">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscode on windows" time="0.000077958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on non-windows" time="0.000052166">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vscodium on windows" time="0.000047958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on non-windows" time="0.000046708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for windsurf on windows" time="0.000047542">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on non-windows" time="0.000045792">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for cursor on windows" time="0.000046666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on non-windows" time="0.000045625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for zed on windows" time="0.000044916">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.000074292">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.000054208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.00006325">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.000839458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.000742459">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.00016025">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.000168125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.000112667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.000102083">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.000155">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.000260458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.000139083">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.000185083">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.000113667">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.000109084">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.000162042">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.00011025">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.0001045">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on non-windows" time="0.000259417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for vim on windows" time="0.000134958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on non-windows" time="0.000101125">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call execSync for neovim on windows" time="0.000095458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.000205792">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.000096417">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.000065833">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.000066334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.000061">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.00006275">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.000061334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.0000555">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.000051625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.000124917">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.00005175">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.000667834">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.000052834">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.000048625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.000046625">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.000142666">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.000051708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.000051291">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.0000675">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.000066459">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.000061208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.000061708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.000058417">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.js" timestamp="2025-07-02T17:04:59.371Z" hostname="Adarshs-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.013925334">
        <testcase classname="src/utils/errorReporting.test.js" name="reportError &gt; should generate a report and log the path" time="0.003742375">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.js" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.002789">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.js" name="reportError &gt; should handle string errors" time="0.001149084">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.js" name="reportError &gt; should log fallback message if writing report fails" time="0.004579375">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.js" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.000659041">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.js" name="reportError &gt; should generate a report without context if context is not provided" time="0.0002735">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-07-02T17:04:59.371Z" hostname="Adarshs-MacBook-Pro.local" tests="6" failures="0" errors="0" skipped="0" time="0.016811167">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.006601291">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.000871875">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.00059675">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.006428666">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.00073775">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.00057025">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.js" timestamp="2025-07-02T17:04:59.371Z" hostname="Adarshs-MacBook-Pro.local" tests="34" failures="0" errors="0" skipped="0" time="0.196275458">
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.001888125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.001143542">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.000467375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.000362208">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.000389167">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.000384042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.000359125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.000582417">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.000856291">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.000535417">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.000627083">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.000493583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts)" time="0.002744916">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.000746833">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.000511291">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.000470708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.000468416">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.001700625">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.000708125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.000792833">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.002382958">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.00062925">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.003535708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.000692875">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.001617292">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.001275292">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.002782708">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.005342">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.001693">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.000706958">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.007134542">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.006770416">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.004514291">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.js" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.131762542">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-07-02T17:04:59.373Z" hostname="Adarshs-MacBook-Pro.local" tests="34" failures="0" errors="0" skipped="0" time="0.084406042">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.001628208">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.000424084">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.00064075">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.001701209">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.001637292">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.000791416">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.000569958">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.000662583">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.000922917">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.000717333">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.000630292">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.000414167">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts)" time="0.004030042">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.000922584">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.000586167">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.000606916">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.000543916">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.000472208">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.000732791">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.000509417">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.001742333">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.001782542">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.008922834">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.001576167">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.002595666">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.002136459">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.003232667">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.003831">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.002162166">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.002049375">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.008017125">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.005611834">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.004606875">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.015281083">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.js" timestamp="2025-07-02T17:04:59.375Z" hostname="Adarshs-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.19857825">
        <testcase classname="src/utils/flashFallback.integration.test.js" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.026558458">
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.js" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.008185959">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:60:53
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.js" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.160400875">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:99:74
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:99:74
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:99:74
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:99:74
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.js" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.001180375">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.integration.test.ts" timestamp="2025-07-02T17:04:59.376Z" hostname="Adarshs-MacBook-Pro.local" tests="4" failures="0" errors="0" skipped="0" time="0.202722417">
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should automatically accept fallback" time="0.034168209">
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should trigger fallback after 2 consecutive 429 errors for OAuth users" time="0.007080834">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:60:30
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should not trigger fallback for API key users" time="0.159324958">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:99:51
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:99:51
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:99:51
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at createSimulated429Error [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/testUtils.ts:59:17[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/flashFallback.integration.test.ts:99:51
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.integration.test.ts" name="Flash Fallback Integration &gt; should properly disable simulation state after fallback" time="0.001247583">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.js" timestamp="2025-07-02T17:04:59.376Z" hostname="Adarshs-MacBook-Pro.local" tests="36" failures="0" errors="0" skipped="0" time="0.004350833">
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no candidates" time="0.000715709">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for empty candidates array" time="0.000071542">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no parts" time="0.000087084">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseText &gt; should extract text from a single text part" time="0.000109875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseText &gt; should concatenate text from multiple text parts" time="0.000046042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseText &gt; should ignore function call parts" time="0.000054583">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined if only function call parts exist" time="0.000041375">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.000059584">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.000048875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.0000385">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.0000385">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.000036458">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.000053792">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.000036292">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.000036292">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.000365958">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.000073792">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.000054042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.000040458">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.000053416">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.000059167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.000055667">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.0001405">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.000042125">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.000071333">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.00003825">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.000056291">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.000035875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.000054583">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.000043208">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.000047417">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.000037292">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.000051458">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.000040875">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.000043334">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.js" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.0000345">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-07-02T17:04:59.378Z" hostname="Adarshs-MacBook-Pro.local" tests="36" failures="0" errors="0" skipped="0" time="0.004598458">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no candidates" time="0.000759334">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for empty candidates array" time="0.000072792">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined for no parts" time="0.000087125">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should extract text from a single text part" time="0.00011225">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should concatenate text from multiple text parts" time="0.000047459">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should ignore function call parts" time="0.000052834">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseText &gt; should return undefined if only function call parts exist" time="0.000041083">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.000057459">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.000095084">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.000063541">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.000123625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.000047666">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.000062">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.000037833">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.000039959">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.000387583">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.000074542">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.000058208">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.000041375">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.000055041">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.000059458">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.00005575">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.000050042">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.000036541">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.000091709">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.000336666">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.000099292">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.000047291">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.000146291">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.000057625">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.00005225">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.000040208">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.00009925">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.00006025">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.000052167">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.000038584">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.js" timestamp="2025-07-02T17:04:59.379Z" hostname="Adarshs-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.02851975">
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should return basic folder structure" time="0.013404333">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should handle an empty folder" time="0.001475292">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.002709625">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.000868625">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.000499333">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.000309917">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.000286041">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.000268834">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should handle non-existent directory" time="0.000783375">
            <system-err>
Warning: Could not read directory /nonexistent: ENOENT

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.000469916">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.001689875">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure gitignore &gt; should ignore files and folders specified in .gitignore" time="0.003829792">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.js" name="getFolderStructure gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.000473041">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-07-02T17:04:59.380Z" hostname="Adarshs-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.020624958">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.011564583">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.000342167">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.000339875">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.000381458">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.000402084">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.001253292">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.001978209">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.000341334">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.0007845">
            <system-err>
Warning: Could not read directory /nonexistent: ENOENT

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.000249458">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.000216125">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should ignore files and folders specified in .gitignore" time="0.001462375">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.000358458">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.js" timestamp="2025-07-02T17:04:59.381Z" hostname="Adarshs-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.015488084">
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.004048833">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.002171791">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.000552709">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.000333084">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .geminiignore exists" time="0.000215292">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.001269292">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.003044625">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.000423458">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.000286917">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.000260875">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.000262458">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.000218125">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.000225709">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.00024175">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.js" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.000197292">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-07-02T17:04:59.382Z" hostname="Adarshs-MacBook-Pro.local" tests="15" failures="0" errors="0" skipped="0" time="0.008133542">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .gitignore exists" time="0.002188167">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should load .gitignore patterns when file exists" time="0.001455833">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle git exclude file" time="0.000431375">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should handle custom patterns file name" time="0.000260708">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; initialization &gt; should initialize without errors when no .geminiignore exists" time="0.00025825">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should always ignore .git directory" time="0.000300666">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files matching patterns" time="0.0003285">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should ignore files with path-specific patterns" time="0.000214708">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle negation patterns" time="0.000273667">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should not ignore files that do not match patterns" time="0.000200625">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle absolute paths correctly" time="0.000212625">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle paths outside project root by not ignoring them" time="0.000289959">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should handle relative paths correctly" time="0.00032675">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored &gt; should normalize path separators on Windows" time="0.000222667">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; getIgnoredPatterns &gt; should return the raw patterns added" time="0.000188584">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.js" timestamp="2025-07-02T17:04:59.382Z" hostname="Adarshs-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.013753208">
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.001418875">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.001189875">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.000327375">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.000313">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.000296583">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.00112925">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.001622708">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.000891583">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.001012583">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should respect MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY during downward scan" time="0.004388917">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.js" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.000303791">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-07-02T17:04:59.383Z" hostname="Adarshs-MacBook-Pro.local" tests="11" failures="0" errors="0" skipped="0" time="0.021189084">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.00324075">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.004713625">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.000741292">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.000349375">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.000308166">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.000468292">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.000591542">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.001615166">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.001300167">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect MAX_DIRECTORIES_TO_SCAN_FOR_MEMORY during downward scan" time="0.005697417">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.001208917">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.js" timestamp="2025-07-02T17:04:59.383Z" hostname="Adarshs-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0.016910667">
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.005140041">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; processImports &gt; should warn and fail for non-md file imports" time="0.000863833">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.000568583">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.000466667">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.000336375">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.000390625">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.000617792">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.000632083">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.000267291">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.000156834">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000318083">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.000464416">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.000257167">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.js" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.000123">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-07-02T17:04:59.384Z" hostname="Adarshs-MacBook-Pro.local" tests="14" failures="0" errors="0" skipped="0" time="0.010434166">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.003842458">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should warn and fail for non-md file imports" time="0.0009605">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.000546125">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.0002555">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.000414917">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.000456">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.000133375">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.000172583">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.000217291">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.000134042">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.000184708">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.000124667">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.0013685">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.000508667">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.js" timestamp="2025-07-02T17:04:59.385Z" hostname="Adarshs-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0.020115083">
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return null if history is empty" time="0.00209">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.001010333">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.001137666">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.002650042">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.002168292">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.001058667">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.000908959">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.004739958">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.js" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.003538125">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-07-02T17:04:59.385Z" hostname="Adarshs-MacBook-Pro.local" tests="9" failures="0" errors="0" skipped="0" time="0.035008083">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.009150458">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.001545708">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.003337709">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.000987417">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.001377875">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson throws an error" time="0.002841708">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns invalid JSON (missing next_speaker)" time="0.000989083">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns a non-string next_speaker" time="0.011324833">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if geminiClient.generateJson returns an invalid next_speaker string value" time="0.002046792">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.js" timestamp="2025-07-02T17:04:59.386Z" hostname="Adarshs-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.051346084">
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.002765416">
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.007131209">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:66:37
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.004931833">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:82:37
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.001380042">
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.001674875">
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.00099375">
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.008706292">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:164:37
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.007121">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at runRetry [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:193:23[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:200:22
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at runRetry [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:193:23[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:214:22
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.003413542">
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.0022625">
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.001821833">
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.003558167">
        </testcase>
        <testcase classname="src/utils/retry.test.js" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.002668125">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:375:36
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:386:39
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-07-02T17:04:59.387Z" hostname="Adarshs-MacBook-Pro.local" tests="13" failures="0" errors="0" skipped="0" time="0.047064292">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.003092042">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.008688875">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:66:21
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.002810792">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:82:21
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.000345459">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.000559875">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.000981458">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.003805542">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:164:21
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.006841166">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at runRetry [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:200:22
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:27:32
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at runRetry [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:193:7[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:214:22
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.002455625">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.004844208">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.005110334">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.003585959">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.001813334">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:375:36
    at mockCall (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4mtinyspy[24m/dist/index.js:47:103)
    at retryWithBackoff [90m(/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.ts:85:20[90m)[39m
    at [90m/Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/packages/core/[39msrc/utils/retry.test.ts:386:23
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///Users/adarshkant/Desktop/linux-mac-os/linuxos-ai/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_id.test.js" timestamp="2025-07-02T17:04:59.388Z" hostname="Adarshs-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.005275875">
        <testcase classname="src/utils/user_id.test.js" name="user_id &gt; getInstallationId &gt; should return a valid UUID format string" time="0.002863">
        </testcase>
        <testcase classname="src/utils/user_id.test.js" name="user_id &gt; getObfuscatedGoogleAccountId &gt; should return a non-empty string" time="0.000697083">
        </testcase>
        <testcase classname="src/utils/user_id.test.js" name="user_id &gt; getObfuscatedGoogleAccountId &gt; should return empty string when no Google Account ID is cached" time="0.00014975">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/user_id.test.ts" timestamp="2025-07-02T17:04:59.388Z" hostname="Adarshs-MacBook-Pro.local" tests="3" failures="0" errors="0" skipped="0" time="0.002707084">
        <testcase classname="src/utils/user_id.test.ts" name="user_id &gt; getInstallationId &gt; should return a valid UUID format string" time="0.000911333">
        </testcase>
        <testcase classname="src/utils/user_id.test.ts" name="user_id &gt; getObfuscatedGoogleAccountId &gt; should return a non-empty string" time="0.000510125">
        </testcase>
        <testcase classname="src/utils/user_id.test.ts" name="user_id &gt; getObfuscatedGoogleAccountId &gt; should return empty string when no Google Account ID is cached" time="0.0001315">
        </testcase>
    </testsuite>
</testsuites>
